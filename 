WAIT(3P)                                                                                                                                       POSIX Programmer's Manual                                                                                                                                       WAIT(3P)

PPRROOLLOOGG
       This manual page is part of the POSIX Programmer's Manual.  The Linux implementation of this interface may differ (consult the corresponding Linux manual page for details of Linux behavior), or the interface may not be implemented on Linux.

NNAAMMEE
       wait, waitpid — wait for a child process to stop or terminate

SSYYNNOOPPSSIISS
       #include <sys/wait.h>

       pid_t wait(int *_s_t_a_t___l_o_c);
       pid_t waitpid(pid_t _p_i_d, int *_s_t_a_t___l_o_c, int _o_p_t_i_o_n_s);

DDEESSCCRRIIPPTTIIOONN
       The  _w_a_i_t()  and  _w_a_i_t_p_i_d() functions shall obtain status information (see _S_e_c_t_i_o_n _2_._1_3, _S_t_a_t_u_s _I_n_f_o_r_m_a_t_i_o_n) pertaining to one of the caller's child processes. The _w_a_i_t() function obtains status information for process termination from any child process. The _w_a_i_t_p_i_d() function obtains status information
       for process termination, and optionally process stop and/or continue, from a specified subset of the child processes.

       The _w_a_i_t() function shall cause the calling thread to become blocked until status information generated by child process termination is made available to the thread, or until delivery of a signal whose action is either to execute a signal-catching function or to terminate the process, or  an  error  oc‐
       curs. If termination status information is available prior to the call to _w_a_i_t(), return shall be immediate. If termination status information is available for two or more child processes, the order in which their status is reported is unspecified.

       As described in _S_e_c_t_i_o_n _2_._1_3, _S_t_a_t_u_s _I_n_f_o_r_m_a_t_i_o_n, the _w_a_i_t() and _w_a_i_t_p_i_d() functions consume the status information they obtain.

       The behavior when multiple threads are blocked in _w_a_i_t(), _w_a_i_t_i_d(), or _w_a_i_t_p_i_d() is described in _S_e_c_t_i_o_n _2_._1_3, _S_t_a_t_u_s _I_n_f_o_r_m_a_t_i_o_n.

       The _w_a_i_t_p_i_d() function shall be equivalent to _w_a_i_t() if the _p_i_d argument is (ppiidd__tt)-1 and the _o_p_t_i_o_n_s argument is 0. Otherwise, its behavior shall be modified by the values of the _p_i_d and _o_p_t_i_o_n_s arguments.

       The _p_i_d argument specifies a set of child processes for which _s_t_a_t_u_s is requested. The _w_a_i_t_p_i_d() function shall only return the status of a child process from this set:

        *  If _p_i_d is equal to (ppiidd__tt)-1, _s_t_a_t_u_s is requested for any child process. In this respect, _w_a_i_t_p_i_d() is then equivalent to _w_a_i_t().

        *  If _p_i_d is greater than 0, it specifies the process ID of a single child process for which _s_t_a_t_u_s is requested.

        *  If _p_i_d is 0, _s_t_a_t_u_s is requested for any child process whose process group ID is equal to that of the calling process.

        *  If _p_i_d is less than (ppiidd__tt)-1, _s_t_a_t_u_s is requested for any child process whose process group ID is equal to the absolute value of _p_i_d.

       The _o_p_t_i_o_n_s argument is constructed from the bitwise-inclusive OR of zero or more of the following flags, defined in the _<_s_y_s_/_w_a_i_t_._h_> header:

       WCONTINUED  The _w_a_i_t_p_i_d() function shall report the status of any continued child process specified by _p_i_d whose status has not been reported since it continued from a job control stop.

       WNOHANG     The _w_a_i_t_p_i_d() function shall not suspend execution of the calling thread if _s_t_a_t_u_s is not immediately available for one of the child processes specified by _p_i_d.

       WUNTRACED   The status of any child processes specified by _p_i_d that are stopped, and whose status has not yet been reported since they stopped, shall also be reported to the requesting process.

       If  _w_a_i_t()  or  _w_a_i_t_p_i_d()  return  because  the  status of a child process is available, these functions shall return a value equal to the process ID of the child process. In this case, if the value of the argument _s_t_a_t___l_o_c is not a null pointer, information shall be stored in the location pointed to by
       _s_t_a_t___l_o_c.  The value stored at the location pointed to by _s_t_a_t___l_o_c shall be 0 if and only if the status returned is from a terminated child process that terminated by one of the following means:

        1. The process returned 0 from _m_a_i_n().

        2. The process called ___e_x_i_t() or _e_x_i_t() with a _s_t_a_t_u_s argument of 0.

        3. The process was terminated because the last thread in the process terminated.

       Regardless of its value, this information may be interpreted using the following macros, which are defined in _<_s_y_s_/_w_a_i_t_._h_> and evaluate to integral expressions; the _s_t_a_t___v_a_l argument is the integer value pointed to by _s_t_a_t___l_o_c.

       WIFEXITED(_s_t_a_t___v_a_l)
             Evaluates to a non-zero value if _s_t_a_t_u_s was returned for a child process that terminated normally.

       WEXITSTATUS(_s_t_a_t___v_a_l)
             If the value of WIFEXITED(_s_t_a_t___v_a_l) is non-zero, this macro evaluates to the low-order 8 bits of the _s_t_a_t_u_s argument that the child process passed to ___e_x_i_t() or _e_x_i_t(), or the value the child process returned from _m_a_i_n().

       WIFSIGNALED(_s_t_a_t___v_a_l)
             Evaluates to a non-zero value if _s_t_a_t_u_s was returned for a child process that terminated due to the receipt of a signal that was not caught (see _<_s_i_g_n_a_l_._h_>).

       WTERMSIG(_s_t_a_t___v_a_l)
             If the value of WIFSIGNALED(_s_t_a_t___v_a_l) is non-zero, this macro evaluates to the number of the signal that caused the termination of the child process.

       WIFSTOPPED(_s_t_a_t___v_a_l)
             Evaluates to a non-zero value if _s_t_a_t_u_s was returned for a child process that is currently stopped.

       WSTOPSIG(_s_t_a_t___v_a_l)
             If the value of WIFSTOPPED(_s_t_a_t___v_a_l) is non-zero, this macro evaluates to the number of the signal that caused the child process to stop.

       WIFCONTINUED(_s_t_a_t___v_a_l)
             Evaluates to a non-zero value if _s_t_a_t_u_s was returned for a child process that has continued from a job control stop.

       It is unspecified whether the _s_t_a_t_u_s value returned by calls to _w_a_i_t() or _w_a_i_t_p_i_d() for processes created by _p_o_s_i_x___s_p_a_w_n() or _p_o_s_i_x___s_p_a_w_n_p() can indicate a WIFSTOPPED(_s_t_a_t___v_a_l) before subsequent calls to _w_a_i_t() or _w_a_i_t_p_i_d() indicate WIFEXITED(_s_t_a_t___v_a_l) as the result of an error detected before  the  new
       process image starts executing.

       It is unspecified whether the _s_t_a_t_u_s value returned by calls to _w_a_i_t() or _w_a_i_t_p_i_d() for processes created by _p_o_s_i_x___s_p_a_w_n() or _p_o_s_i_x___s_p_a_w_n_p() can indicate a WIFSIGNALED(_s_t_a_t___v_a_l) if a signal is sent to the parent's process group after _p_o_s_i_x___s_p_a_w_n() or _p_o_s_i_x___s_p_a_w_n_p() is called.

       If the information pointed to by _s_t_a_t___l_o_c was stored by a call to _w_a_i_t_p_i_d() that specified the WUNTRACED flag and did not specify the WCONTINUED flag, exactly one of the macros WIFEXITED(*_s_t_a_t___l_o_c), WIFSIGNALED(*_s_t_a_t___l_o_c), and WIFSTOPPED(*_s_t_a_t___l_o_c) shall evaluate to a non-zero value.

       If the information pointed to by _s_t_a_t___l_o_c was stored by a call to _w_a_i_t_p_i_d() that specified the WUNTRACED and WCONTINUED flags, exactly one of the macros WIFEXITED(*_s_t_a_t___l_o_c), WIFSIGNALED(*_s_t_a_t___l_o_c), WIFSTOPPED(*_s_t_a_t___l_o_c), and WIFCONTINUED(*_s_t_a_t___l_o_c) shall evaluate to a non-zero value.

       If the information pointed to by _s_t_a_t___l_o_c was stored by a call to _w_a_i_t_p_i_d() that did not specify the WUNTRACED or WCONTINUED flags, or by a call to the _w_a_i_t() function, exactly one of the macros WIFEXITED(*_s_t_a_t___l_o_c) and WIFSIGNALED(*_s_t_a_t___l_o_c) shall evaluate to a non-zero value.

       If the information pointed to by _s_t_a_t___l_o_c was stored by a call to _w_a_i_t_p_i_d() that did not specify the WUNTRACED flag and specified the WCONTINUED flag, exactly one of the macros WIFEXITED(*_s_t_a_t___l_o_c), WIFSIGNALED(*_s_t_a_t___l_o_c), and WIFCONTINUED(*_s_t_a_t___l_o_c) shall evaluate to a non-zero value.

       If  _POSIX_REALTIME_SIGNALS  is  defined, and the implementation queues the SIGCHLD signal, then if _w_a_i_t() or _w_a_i_t_p_i_d() returns because the status of a child process is available, any pending SIGCHLD signal associated with the process ID of the child process shall be discarded. Any other pending SIGCHLD
       signals shall remain pending.

       Otherwise, if SIGCHLD is blocked, if _w_a_i_t() or _w_a_i_t_p_i_d() return because the status of a child process is available, any pending SIGCHLD signal shall be cleared unless the status of another child process is available.

       For all other conditions, it is unspecified whether child _s_t_a_t_u_s will be available when a SIGCHLD signal is delivered.

       There may be additional implementation-defined circumstances under which _w_a_i_t() or _w_a_i_t_p_i_d() report _s_t_a_t_u_s.  This shall not occur unless the calling process or one of its child processes explicitly makes use of a non-standard extension. In these cases the interpretation of the reported _s_t_a_t_u_s is  imple‐
       mentation-defined.

       If a parent process terminates without waiting for all of its child processes to terminate, the remaining child processes shall be assigned a new parent process ID corresponding to an implementation-defined system process.

RREETTUURRNN VVAALLUUEE
       If  _w_a_i_t()  or _w_a_i_t_p_i_d() returns because the status of a child process is available, these functions shall return a value equal to the process ID of the child process for which _s_t_a_t_u_s is reported. If _w_a_i_t() or _w_a_i_t_p_i_d() returns due to the delivery of a signal to the calling process, -1 shall be returned
       and _e_r_r_n_o set to [[EEIINNTTRR]].  If _w_a_i_t_p_i_d() was invoked with WNOHANG set in _o_p_t_i_o_n_s, it has at least one child process specified by _p_i_d for which _s_t_a_t_u_s is not available, and _s_t_a_t_u_s is not available for any process specified by _p_i_d, 0 is returned. Otherwise, -1 shall be returned, and _e_r_r_n_o set  to  indicate
       the error.

EERRRROORRSS
       The _w_a_i_t() function shall fail if:

       EECCHHIILLDD The calling process has no existing unwaited-for child processes.

       EEIINNTTRR  The function was interrupted by a signal. The value of the location pointed to by _s_t_a_t___l_o_c is undefined.

       The _w_a_i_t_p_i_d() function shall fail if:

       EECCHHIILLDD The process specified by _p_i_d does not exist or is not a child of the calling process, or the process group specified by _p_i_d does not exist or does not have any member process that is a child of the calling process.

       EEIINNTTRR  The function was interrupted by a signal. The value of the location pointed to by _s_t_a_t___l_o_c is undefined.

       EEIINNVVAALL The _o_p_t_i_o_n_s argument is not valid.

       _T_h_e _f_o_l_l_o_w_i_n_g _s_e_c_t_i_o_n_s _a_r_e _i_n_f_o_r_m_a_t_i_v_e_.

EEXXAAMMPPLLEESS
   WWaaiittiinngg ffoorr aa CChhiilldd PPrroocceessss aanndd tthheenn CChheecckkiinngg iittss SSttaattuuss
       The  following example demonstrates the use of _w_a_i_t_p_i_d(), _f_o_r_k(), and the macros used to interpret the status value returned by _w_a_i_t_p_i_d() (and _w_a_i_t()).  The code segment creates a child process which does some unspecified work. Meanwhile the parent loops performing calls to _w_a_i_t_p_i_d() to monitor the sta‐
       tus of the child. The loop terminates when child termination is detected.

           #include <stdio.h>
           #include <stdlib.h>
           #include <unistd.h>
           #include <sys/wait.h>
           ...

           pid_t child_pid, wpid;
           int status;

           child_pid = fork();
           if (child_pid == -1) {      /* fork() failed */
               perror("fork");
               exit(EXIT_FAILURE);
           }

           if (child_pid == 0) {       /* This is the child */
               /* Child does some work and then terminates */
               ...

           } else {                    /* This is the parent */
               do {
                   wpid = waitpid(child_pid, &status, WUNTRACED
           #ifdef WCONTINUED       /* Not all implementations support this */
                   | WCONTINUED
           #endif
                   );
                   if (wpid == -1) {
                       perror("waitpid");
                       exit(EXIT_FAILURE);
                   }

                   if (WIFEXITED(status)) {
                       printf("child exited, status=%d\n", WEXITSTATUS(status));

                   } else if (WIFSIGNALED(status)) {
                       printf("child killed (signal %d)\n", WTERMSIG(status));

                   } else if (WIFSTOPPED(status)) {
                       printf("child stopped (signal %d)\n", WSTOPSIG(status));

           #ifdef WIFCONTINUED     /* Not all implementations support this */
                   } else if (WIFCONTINUED(status)) {
                       printf("child continued\n");
           #endif
                   } else {    /* Non-standard case -- may never happen */
                       printf("Unexpected status (0x%x)\n", status);
                   }
               } while (!WIFEXITED(status) && !WIFSIGNALED(status));
           }

   WWaaiittiinngg ffoorr aa CChhiilldd PPrroocceessss iinn aa SSiiggnnaall HHaannddlleerr ffoorr SSIIGGCCHHLLDD
       The following example demonstrates how to use _w_a_i_t_p_i_d() in a signal handler for SIGCHLD without passing -1 as the _p_i_d argument. (See the APPLICATION USAGE section below for the reasons why passing a _p_i_d of -1 is not recommended.) The method used here relies on the standard  behavior  of  _w_a_i_t_p_i_d()  when
       SIGCHLD is blocked. On historical non-conforming systems, the status of some child processes might not be reported.

           #include <stdlib.h>
           #include <stdio.h>
           #include <signal.h>
           #include <sys/types.h>
           #include <sys/wait.h>
           #include <unistd.h>

           #define CHILDREN 10

           static void
           handle_sigchld(int signum, siginfo_t *sinfo, void *unused)
           {
               int sav_errno = errno;
               int status;

               /*
                * Obtain status information for the child which
                * caused the SIGCHLD signal and write its exit code
                * to stdout.
               */
               if (sinfo->si_code != CLD_EXITED)
               {
                   static char msg[] = "wrong si_code\n";
                   write(2, msg, sizeof msg - 1);
               }
               else if (waitpid(sinfo->si_pid, &status, 0) == -1)
               {
                   static char msg[] = "waitpid() failed\n";
                   write(2, msg, sizeof msg - 1);
               }
               else if (!WIFEXITED(status))
               {
                   static char msg[] = "WIFEXITED was false\n";
                   write(2, msg, sizeof msg - 1);
               }
               else
               {
                   int code = WEXITSTATUS(status);
                   char buf[2];
                   buf[0] = '0' + code;
                   buf[1] = '\n';
                   write(1, buf, 2);
               }
               errno = sav_errno;
           }

           int
           main(void)
           {
               int i;
               pid_t pid;
               struct sigaction sa;

               sa.sa_flags = SA_SIGINFO;
               sa.sa_sigaction = handle_sigchld;
               sigemptyset(&sa.sa_mask);
               if (sigaction(SIGCHLD, &sa, NULL) == -1)
               {
                   perror("sigaction");
                   exit(EXIT_FAILURE);
               }

               for (i = 0; i < CHILDREN; i++)
               {
                   switch (pid = fork())
                   {
                   case -1:
                       perror("fork");
                       exit(EXIT_FAILURE);
                   case 0:
                       sleep(2);
                       _exit(i);
                   }
               }

               /* Wait for all the SIGCHLD signals, then terminate on SIGALRM */
               alarm(3);
               for (;;)
                   pause();

               return 0; /* NOTREACHED */
           }

AAPPPPLLIICCAATTIIOONN UUSSAAGGEE
       Calls  to _w_a_i_t() will collect information about any child process. This may result in interactions with other interfaces that may be waiting for their own children (such as by use of _s_y_s_t_e_m()).  For this and other reasons it is recommended that portable applications not use _w_a_i_t(), but instead use _w_a_i_t_‐
       _p_i_d().  For these same reasons, the use of _w_a_i_t_p_i_d() with a _p_i_d argument of -1, and the use of _w_a_i_t_i_d() with the _i_d_t_y_p_e argument set to P_ALL, are also not recommended for portable applications.

       As specified in _C_o_n_s_e_q_u_e_n_c_e_s _o_f _P_r_o_c_e_s_s _T_e_r_m_i_n_a_t_i_o_n, if the calling process has SA_NOCLDWAIT set or has SIGCHLD set to SIG_IGN, then the termination of a child process will not cause status information to become available to a thread blocked in _w_a_i_t(), _w_a_i_t_i_d(), or _w_a_i_t_p_i_d().  Thus, a thread blocked  in
       one of the wait functions will remain blocked unless some other condition causes the thread to resume execution (such as an [[EECCHHIILLDD]] failure due to no remaining children in the set of waited-for children).

RRAATTIIOONNAALLEE
       A  call  to  the  _w_a_i_t()  or  _w_a_i_t_p_i_d() function only returns _s_t_a_t_u_s on an immediate child process of the calling process; that is, a child that was produced by a single _f_o_r_k() call (perhaps followed by an _e_x_e_c or other function calls) from the parent. If a child produces grandchildren by further use of
       _f_o_r_k(), none of those grandchildren nor any of their descendants affect the behavior of a _w_a_i_t() from the original parent process. Nothing in this volume of POSIX.1‐2017 prevents an implementation from providing extensions that permit a process to get _s_t_a_t_u_s from a grandchild or any other process, but a
       process that does not use such extensions must be guaranteed to see _s_t_a_t_u_s from only its direct children.

       The _w_a_i_t_p_i_d() function is provided for three reasons:

        1. To support job control

        2. To permit a non-blocking version of the _w_a_i_t() function

        3. To permit a library routine, such as _s_y_s_t_e_m() or _p_c_l_o_s_e(), to wait for its children without interfering with other terminated children for which the process has not waited

       The  first two of these facilities are based on the _w_a_i_t_3() function provided by 4.3 BSD. The function uses the _o_p_t_i_o_n_s argument, which is equivalent to an argument to _w_a_i_t_3().  The WUNTRACED flag is used only in conjunction with job control on systems supporting job control. Its name comes from 4.3 BSD
       and refers to the fact that there are two types of stopped processes in that implementation: processes being traced via the _p_t_r_a_c_e() debugging facility and (untraced) processes stopped by job control signals. Since _p_t_r_a_c_e() is not part of this volume of POSIX.1‐2017, only the second  type  is  relevant.
       The name WUNTRACED was retained because its usage is the same, even though the name is not intuitively meaningful in this context.

       The third reason for the _w_a_i_t_p_i_d() function is to permit independent sections of a process to spawn and wait for children without interfering with each other. For example, the following problem occurs in developing a portable shell, or command interpreter:

           stream = popen("/bin/true");
           (void) system("sleep 100");
           (void) pclose(stream);

       On all historical implementations, the final _p_c_l_o_s_e() fails to reap the _w_a_i_t() _s_t_a_t_u_s of the _p_o_p_e_n().

       The  status  values  are  retrieved by macros, rather than given as specific bit encodings as they are in most historical implementations (and thus expected by existing programs). This was necessary to eliminate a limitation on the number of signals an implementation can support that was inherent in the
       traditional encodings. This volume of POSIX.1‐2017 does require that a _s_t_a_t_u_s value of zero corresponds to a process calling ___e_x_i_t(0), as this is the most common encoding expected by existing programs.  Some of the macro names were adopted from 4.3 BSD.

       These macros syntactically operate on an arbitrary integer value. The behavior is undefined unless that value is one stored by a successful call to _w_a_i_t() or _w_a_i_t_p_i_d() in the location pointed to by the _s_t_a_t___l_o_c argument. An early proposal attempted to make this clearer by  specifying  each  argument  as
       *_s_t_a_t___l_o_c  rather than _s_t_a_t___v_a_l.  However, that did not follow the conventions of other specifications in this volume of POSIX.1‐2017 or traditional usage. It also could have implied that the argument to the macro must literally be *_s_t_a_t___l_o_c; in fact, that value can be stored or passed as an argument to
       other functions before being interpreted by these macros.

       The extension that affects _w_a_i_t() and _w_a_i_t_p_i_d() and is common in historical implementations is the _p_t_r_a_c_e() function. It is called by a child process and causes that child to stop and return a _s_t_a_t_u_s that appears identical to the _s_t_a_t_u_s indicated by WIFSTOPPED.  The _s_t_a_t_u_s of _p_t_r_a_c_e() children is tradi‐
       tionally  returned  regardless of the WUNTRACED flag (or by the _w_a_i_t() function). Most applications do not need to concern themselves with such extensions because they have control over what extensions they or their children use. However, applications, such as command interpreters, that invoke arbitrary
       processes may see this behavior when those arbitrary processes misuse such extensions.

       Implementations that support ccoorree file creation or other implementation-defined actions on termination of some processes traditionally provide a bit in the _s_t_a_t_u_s returned by _w_a_i_t() to indicate that such actions have occurred.

       Allowing the _w_a_i_t() family of functions to discard a pending SIGCHLD signal that is associated with a successfully waited-for child process puts them into the _s_i_g_w_a_i_t() and _s_i_g_w_a_i_t_i_n_f_o() category with respect to SIGCHLD.

       This definition allows implementations to treat a pending SIGCHLD signal as accepted by the process in _w_a_i_t(), with the same meaning of ``accepted'' as when that word is applied to the _s_i_g_w_a_i_t() family of functions.

       Allowing the _w_a_i_t() family of functions to behave this way permits an implementation to be able to deal precisely with SIGCHLD signals.

       In particular, an implementation that does accept (discard) the SIGCHLD signal can make the following guarantees regardless of the queuing depth of signals in general (the list of waitable children can hold the SIGCHLD queue):

        1. If a SIGCHLD signal handler is established via _s_i_g_a_c_t_i_o_n() without the SA_RESETHAND flag, SIGCHLD signals can be accurately counted; that is, exactly one SIGCHLD signal will be delivered to or accepted by the process for every child process that terminates.

        2. A single _w_a_i_t() issued from a SIGCHLD signal handler can be guaranteed to return immediately with status information for a child process.

        3. When SA_SIGINFO is requested, the SIGCHLD signal handler can be guaranteed to receive a non-null pointer to a ssiiggiinnffoo__tt structure that describes a child process for which a wait via _w_a_i_t_p_i_d() or _w_a_i_t_i_d() will not block or fail.

        4. The _s_y_s_t_e_m() function will not cause the SIGCHLD handler of a process to be called as a result of the _f_o_r_k()/_e_x_e_c executed within _s_y_s_t_e_m() because _s_y_s_t_e_m() will accept the SIGCHLD signal when it performs a _w_a_i_t_p_i_d() for its child process. This is a desirable behavior of _s_y_s_t_e_m() so that  it  can  be
           used in a library without causing side-effects to the application linked with the library.

       An implementation that does not permit the _w_a_i_t() family of functions to accept (discard) a pending SIGCHLD signal associated with a successfully waited-for child, cannot make the guarantees described above for the following reasons:

       Guarantee #1
             Although  it  might  be assumed that reliable queuing of all SIGCHLD signals generated by the system can make this guarantee, the counter-example is the case of a process that blocks SIGCHLD and performs an indefinite loop of _f_o_r_k()/_w_a_i_t() operations. If the implementation supports queued signals,
             then eventually the system will run out of memory for the queue. The guarantee cannot be made because there must be some limit to the depth of queuing.

       Guarantees #2 and #3
             These cannot be guaranteed unless the _w_a_i_t() family of functions accepts the SIGCHLD signal. Otherwise, a _f_o_r_k()/_w_a_i_t() executed while SIGCHLD is blocked (as in the _s_y_s_t_e_m() function) will result in an invocation of the handler when SIGCHLD is unblocked, after the process has disappeared.

       Guarantee #4
             Although possible to make this guarantee, _s_y_s_t_e_m() would have to set the SIGCHLD handler to SIG_DFL so that the SIGCHLD signal generated by its _f_o_r_k() would be discarded (the SIGCHLD default action is to be ignored), then restore it to its previous setting. This would have the undesirable side-ef‐
             fect of discarding all SIGCHLD signals pending to the process.

FFUUTTUURREE DDIIRREECCTTIIOONNSS
       None.

SSEEEE AALLSSOO
       _S_e_c_t_i_o_n _2_._1_3, _S_t_a_t_u_s _I_n_f_o_r_m_a_t_i_o_n, _e_x_e_c, _e_x_i_t(), _f_o_r_k(), _s_y_s_t_e_m(), _w_a_i_t_i_d()

       The Base Definitions volume of POSIX.1‐2017, _S_e_c_t_i_o_n _4_._1_2, _M_e_m_o_r_y _S_y_n_c_h_r_o_n_i_z_a_t_i_o_n, <<ssiiggnnaall..hh>>, <<ssyyss__wwaaiitt..hh>>

CCOOPPYYRRIIGGHHTT
       Portions of this text are reprinted and reproduced in electronic form from IEEE Std 1003.1-2017, Standard for Information Technology -- Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 7, 2018 Edition, Copyright (C) 2018 by the Institute of Electrical and Electronics
       Engineers, Inc and The Open Group.  In the event of any discrepancy between this version and the original IEEE and The Open Group Standard, the original IEEE and The Open Group Standard is the referee document. The original Standard can be obtained online at http://www.opengroup.org/unix/online.html .

       Any typographical or formatting errors that appear in this page are most likely to have been introduced during the conversion of the source files to man page format. To report such errors, see https://www.kernel.org/doc/man-pages/reporting_bugs.html .

IEEE/The Open Group                                                                                                                                       2017                                                                                                                                                 WAIT(3P)
